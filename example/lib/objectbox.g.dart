// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/auth/models/schema/connected_account_info_model.dart';
import 'features/settings/models/schema/app_log_model.dart';
import 'features/symbols/models/schema/symbol_model.dart';
import 'features/trade/models/schema/order_model.dart';
import 'features/trade/models/schema/position_model.dart';
import 'features/trade_history/models/schema/account_founds_model.dart';
import 'features/trade_history/models/schema/history_actions_model.dart';
import 'features/trade_history/models/schema/history_pending_model.dart';
import 'features/trade_history/models/schema/history_position_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7338915962351651660),
    name: 'AccountFoundsModel',
    lastPropertyId: const obx_int.IdUid(9, 6647079219548884640),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3066586516163116738),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2924223713976628172),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7248090281483419676),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5274255928569521271),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8366088095864472037),
        name: 'source',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4486221839187937477),
        name: 'date',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5402551930948520290),
        name: 'commission',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 9010032380706671397),
        name: 'isA',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6647079219548884640),
        name: 'swap',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 6549926809211681717),
    name: 'AppLogModel',
    lastPropertyId: const obx_int.IdUid(4, 8722848272607070807),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5518912366874761519),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2015250838569392851),
        name: 'accountNumber',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7755585260247387052),
        name: 'event',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8722848272607070807),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 6465227731177843179),
    name: 'ConnectedAccountInfoModel',
    lastPropertyId: const obx_int.IdUid(16, 8637527534234678131),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5907356954280248992),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9014296739205158232),
        name: 'group',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2701182198431682201),
        name: 'fullName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1933556860261233938),
        name: 'leverage',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2382191238657276076),
        name: 'balance',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5990784844662767768),
        name: 'credit',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6854251111161747640),
        name: 'equity',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4920455012123295061),
        name: 'floating',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2372975008588981434),
        name: 'margin',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5074250678368546436),
        name: 'marginFree',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5298512625754471401),
        name: 'marginLevel',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 4492151473126840671),
        name: 'isSwapFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 208754660058149444),
        name: 'limitPositions',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4383915336293965176),
        name: 'limitPending',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6672365442394550068),
        name: 'rights',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 8637527534234678131),
        name: 'isDefault',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 5704940508695806958),
    name: 'HistoryActionModel',
    lastPropertyId: const obx_int.IdUid(11, 1810286577172905069),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4081842421609360949),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6392632904766755223),
        name: 'account',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 475386608976396967),
        name: 'symbol',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6688149795171369303),
        name: 'source',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1079374386647152289),
        name: 'direction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6539022973204048535),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4647724590486124256),
        name: 'volume',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1024850197672701394),
        name: 'commission',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 480092694831839936),
        name: 'price',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4595167487256397614),
        name: 'profit',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1810286577172905069),
        name: 'createdAt',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 2324218471917688325),
    name: 'HistoryPendingModel',
    lastPropertyId: const obx_int.IdUid(14, 173808738731793687),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4260479926909632314),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 611533385772347119),
        name: 'symbol',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7406824674436640917),
        name: 'direction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4247810512041129673),
        name: 'expirationDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3317703550313494805),
        name: 'createdAt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3148146462154057167),
        name: 'volume',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3258146730509992560),
        name: 'openPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6295608295750818654),
        name: 'tp',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 1480696007890453534),
        name: 'sl',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 7263162600046737885),
        name: 'type',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 4911130097173023774),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 7874196782766962708),
        name: 'openTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8372670243324134093),
        name: 'closedAt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 173808738731793687),
        name: 'reason',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 2658782434109059224),
    name: 'HistoryPositionModel',
    lastPropertyId: const obx_int.IdUid(16, 1490557629439889427),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2823839063773745898),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7667933567810996598),
        name: 'symbol',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3761040361609703927),
        name: 'direction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8972099556630864492),
        name: 'volumeInit',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3856270365685912044),
        name: 'volumeCurrent',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3725762998792628162),
        name: 'openPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5315083559173992362),
        name: 'tp',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2815235953246252029),
        name: 'sl',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6304447703670498929),
        name: 'floating',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5265132637048177450),
        name: 'margin',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 795020333084497841),
        name: 'commission',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6662643244986642544),
        name: 'swap',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 6761718201898422560),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 3566450008272449813),
        name: 'openTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 7918272570831182161),
        name: 'closePrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1490557629439889427),
        name: 'closeTime',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 2757848257591833582),
    name: 'OrderModel',
    lastPropertyId: const obx_int.IdUid(11, 3269471399712209832),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2397649210824983972),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 516035367203780840),
        name: 'symbol',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3797685862566103582),
        name: 'direction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8774116528719372038),
        name: 'expirationDate',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6786888428701498457),
        name: 'createdAt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4645611646635873764),
        name: 'volume',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 8415232728471283528),
        name: 'openPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7680563646081020882),
        name: 'tp',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3322027711761250429),
        name: 'sl',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6565194233292068884),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 3269471399712209832),
        name: 'openTime',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 2148991511338324788),
    name: 'PositionModel',
    lastPropertyId: const obx_int.IdUid(14, 714163282039743759),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6010496129938296858),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1270384312368426629),
        name: 'groupSymbol',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4768567500484567543),
        name: 'direction',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8353767236688447956),
        name: 'volumeInit',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2599041534628090155),
        name: 'volumeCurrent',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6968769938363327567),
        name: 'openPrice',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6766388789026030392),
        name: 'tp',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1737679640577701695),
        name: 'sl',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2904324561924422944),
        name: 'floating',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 8232031726696092769),
        name: 'margin',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 7773140888725359618),
        name: 'commission',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1640406690412829703),
        name: 'swap',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 8895900876536732209),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 714163282039743759),
        name: 'openTime',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 6625471438102745743),
    name: 'SymbolModel',
    lastPropertyId: const obx_int.IdUid(29, 6309271593400245311),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4481739982940219365),
        name: 'id',
        type: 6,
        flags: 129,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1746134494525540580),
        name: 'sector',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5699916185237502243),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6203963269665846057),
        name: 'leverage',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8868078063729992443),
        name: 'ask',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2514558156559394536),
        name: 'bid',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1793295924052010938),
        name: 'marginCurrency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6617861288960868000),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3361901692179871184),
        name: 'profitCurrency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6703649299398292071),
        name: 'timestamp',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1903050076070590936),
        name: 'groupSymbol',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2491139346828964515),
        name: 'contractSize',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 317188808375301960),
        name: 'tickSize',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 5104350617852278141),
        name: 'profitRatio',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 48889354501746340),
        name: 'marginRatio',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7094116759574525463),
        name: 'swapLong',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3797787243723302951),
        name: 'swapShort',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 351183362956646176),
        name: 'commissionIn',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 5515089711522646197),
        name: 'commissionOut',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 4203587108637480837),
        name: 'volumeMin',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 4305204172314000700),
        name: 'volumeMax',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 8106739073853506296),
        name: 'volumeStep',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 249028329776052779),
        name: 'askDifference',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 1725369323300600434),
        name: 'bidDifference',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 313054831013840583),
        name: 'stopLevel',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 3174599279386965781),
        name: 'isFav',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 8070705577863897614),
        name: 'index',
        type: 6,
        flags: 8,
        indexId: const obx_int.IdUid(1, 609572777956972257),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 4426288790982043227),
        name: 'askColorHex',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 6309271593400245311),
        name: 'bidColorHex',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(9, 6625471438102745743),
    lastIndexId: const obx_int.IdUid(1, 609572777956972257),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountFoundsModel: obx_int.EntityDefinition<AccountFoundsModel>(
      model: _entities[0],
      toOneRelations: (AccountFoundsModel object) => [],
      toManyRelations: (AccountFoundsModel object) => {},
      getId: (AccountFoundsModel object) => object.id,
      setId: (AccountFoundsModel object, int id) {
        object.id = id;
      },
      objectToFB: (AccountFoundsModel object, fb.Builder fbb) {
        final typeOffset = fbb.writeString(object.type);
        final commentOffset = fbb.writeString(object.comment);
        final sourceOffset = fbb.writeString(object.source);
        final dateOffset = fbb.writeString(object.date);
        final isAOffset = fbb.writeString(object.isA);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, typeOffset);
        fbb.addFloat64(2, object.amount);
        fbb.addOffset(3, commentOffset);
        fbb.addOffset(4, sourceOffset);
        fbb.addOffset(5, dateOffset);
        fbb.addFloat64(6, object.commission);
        fbb.addOffset(7, isAOffset);
        fbb.addFloat64(8, object.swap);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final amountParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final sourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final dateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object =
            AccountFoundsModel(
                id: idParam,
                amount: amountParam,
                type: typeParam,
                comment: commentParam,
                source: sourceParam,
                date: dateParam,
              )
              ..commission = const fb.Float64Reader().vTableGet(
                buffer,
                rootOffset,
                16,
                0,
              )
              ..isA = const fb.StringReader(
                asciiOptimization: true,
              ).vTableGet(buffer, rootOffset, 18, '')
              ..swap = const fb.Float64Reader().vTableGet(
                buffer,
                rootOffset,
                20,
                0,
              );

        return object;
      },
    ),
    AppLogModel: obx_int.EntityDefinition<AppLogModel>(
      model: _entities[1],
      toOneRelations: (AppLogModel object) => [],
      toManyRelations: (AppLogModel object) => {},
      getId: (AppLogModel object) => object.id,
      setId: (AppLogModel object, int id) {
        object.id = id;
      },
      objectToFB: (AppLogModel object, fb.Builder fbb) {
        final eventOffset = fbb.writeString(object.event);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.accountNumber);
        fbb.addOffset(2, eventOffset);
        fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final eventParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final accountNumberParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = AppLogModel(
          id: idParam,
          event: eventParam,
          createdAt: createdAtParam,
          accountNumber: accountNumberParam,
        );

        return object;
      },
    ),
    ConnectedAccountInfoModel:
        obx_int.EntityDefinition<ConnectedAccountInfoModel>(
          model: _entities[2],
          toOneRelations: (ConnectedAccountInfoModel object) => [],
          toManyRelations: (ConnectedAccountInfoModel object) => {},
          getId: (ConnectedAccountInfoModel object) => object.id,
          setId: (ConnectedAccountInfoModel object, int id) {
            object.id = id;
          },
          objectToFB: (ConnectedAccountInfoModel object, fb.Builder fbb) {
            final groupOffset = fbb.writeString(object.group);
            final fullNameOffset = fbb.writeString(object.fullName);
            fbb.startTable(17);
            fbb.addInt64(0, object.id);
            fbb.addOffset(1, groupOffset);
            fbb.addOffset(2, fullNameOffset);
            fbb.addInt64(3, object.leverage);
            fbb.addFloat64(4, object.balance);
            fbb.addFloat64(5, object.credit);
            fbb.addFloat64(6, object.equity);
            fbb.addFloat64(7, object.floating);
            fbb.addFloat64(8, object.margin);
            fbb.addFloat64(9, object.marginFree);
            fbb.addFloat64(10, object.marginLevel);
            fbb.addBool(11, object.isSwapFree);
            fbb.addInt64(12, object.limitPositions);
            fbb.addInt64(13, object.limitPending);
            fbb.addInt64(14, object.rights);
            fbb.addBool(15, object.isDefault);
            fbb.finish(fbb.endTable());
            return object.id;
          },
          objectFromFB: (obx.Store store, ByteData fbData) {
            final buffer = fb.BufferContext(fbData);
            final rootOffset = buffer.derefObject(0);
            final idParam = const fb.Int64Reader().vTableGet(
              buffer,
              rootOffset,
              4,
              0,
            );
            final groupParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 6, '');
            final leverageParam = const fb.Int64Reader().vTableGet(
              buffer,
              rootOffset,
              10,
              0,
            );
            final balanceParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              12,
              0,
            );
            final creditParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              14,
              0,
            );
            final equityParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              16,
              0,
            );
            final floatingParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              18,
              0,
            );
            final marginParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              20,
              0,
            );
            final marginFreeParam = const fb.Float64Reader().vTableGet(
              buffer,
              rootOffset,
              22,
              0,
            );
            final marginLevelParam = const fb.Float64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              24,
            );
            final isSwapFreeParam = const fb.BoolReader().vTableGetNullable(
              buffer,
              rootOffset,
              26,
            );
            final fullNameParam = const fb.StringReader(
              asciiOptimization: true,
            ).vTableGet(buffer, rootOffset, 8, '');
            final limitPositionsParam = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 28);
            final limitPendingParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              30,
            );
            final rightsParam = const fb.Int64Reader().vTableGetNullable(
              buffer,
              rootOffset,
              32,
            );
            final isDefaultParam = const fb.BoolReader().vTableGet(
              buffer,
              rootOffset,
              34,
              false,
            );
            final object = ConnectedAccountInfoModel(
              id: idParam,
              group: groupParam,
              leverage: leverageParam,
              balance: balanceParam,
              credit: creditParam,
              equity: equityParam,
              floating: floatingParam,
              margin: marginParam,
              marginFree: marginFreeParam,
              marginLevel: marginLevelParam,
              isSwapFree: isSwapFreeParam,
              fullName: fullNameParam,
              limitPositions: limitPositionsParam,
              limitPending: limitPendingParam,
              rights: rightsParam,
              isDefault: isDefaultParam,
            );

            return object;
          },
        ),
    HistoryActionModel: obx_int.EntityDefinition<HistoryActionModel>(
      model: _entities[3],
      toOneRelations: (HistoryActionModel object) => [],
      toManyRelations: (HistoryActionModel object) => {},
      getId: (HistoryActionModel object) => object.id,
      setId: (HistoryActionModel object, int id) {
        object.id = id;
      },
      objectToFB: (HistoryActionModel object, fb.Builder fbb) {
        final symbolOffset = fbb.writeString(object.symbol);
        final sourceOffset = fbb.writeString(object.source);
        final directionOffset = fbb.writeString(object.direction);
        final typeOffset = fbb.writeString(object.type);
        final createdAtOffset = fbb.writeString(object.createdAt);
        fbb.startTable(12);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.account);
        fbb.addOffset(2, symbolOffset);
        fbb.addOffset(3, sourceOffset);
        fbb.addOffset(4, directionOffset);
        fbb.addOffset(5, typeOffset);
        fbb.addFloat64(6, object.volume);
        fbb.addFloat64(7, object.commission);
        fbb.addFloat64(8, object.price);
        fbb.addFloat64(9, object.profit);
        fbb.addOffset(10, createdAtOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final createdAtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final profitParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final priceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final directionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final volumeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final sourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final symbolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final commissionParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final accountParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final object = HistoryActionModel(
          id: idParam,
          createdAt: createdAtParam,
          profit: profitParam,
          price: priceParam,
          direction: directionParam,
          volume: volumeParam,
          type: typeParam,
          source: sourceParam,
          symbol: symbolParam,
          commission: commissionParam,
          account: accountParam,
        );

        return object;
      },
    ),
    HistoryPendingModel: obx_int.EntityDefinition<HistoryPendingModel>(
      model: _entities[4],
      toOneRelations: (HistoryPendingModel object) => [],
      toManyRelations: (HistoryPendingModel object) => {},
      getId: (HistoryPendingModel object) => object.id,
      setId: (HistoryPendingModel object, int id) {
        object.id = id;
      },
      objectToFB: (HistoryPendingModel object, fb.Builder fbb) {
        final symbolOffset = fbb.writeString(object.symbol);
        final directionOffset = fbb.writeString(object.direction);
        final expirationDateOffset = fbb.writeString(object.expirationDate);
        final createdAtOffset = fbb.writeString(object.createdAt);
        final commentOffset = fbb.writeString(object.comment);
        final openTimeOffset = fbb.writeString(object.openTime);
        final closedAtOffset = fbb.writeString(object.closedAt);
        final reasonOffset = fbb.writeString(object.reason);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, symbolOffset);
        fbb.addOffset(2, directionOffset);
        fbb.addOffset(3, expirationDateOffset);
        fbb.addOffset(4, createdAtOffset);
        fbb.addFloat64(5, object.volume);
        fbb.addFloat64(6, object.openPrice);
        fbb.addFloat64(7, object.tp);
        fbb.addFloat64(8, object.sl);
        fbb.addInt64(9, object.type);
        fbb.addOffset(10, commentOffset);
        fbb.addOffset(11, openTimeOffset);
        fbb.addOffset(12, closedAtOffset);
        fbb.addOffset(13, reasonOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final expirationDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final symbolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final directionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final closedAtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final reasonParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final volumeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final tpParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final slParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final openPriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final typeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final createdAtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final openTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final object = HistoryPendingModel(
          id: idParam,
          expirationDate: expirationDateParam,
          symbol: symbolParam,
          direction: directionParam,
          closedAt: closedAtParam,
          reason: reasonParam,
          volume: volumeParam,
          tp: tpParam,
          sl: slParam,
          openPrice: openPriceParam,
          type: typeParam,
          createdAt: createdAtParam,
          comment: commentParam,
          openTime: openTimeParam,
        );

        return object;
      },
    ),
    HistoryPositionModel: obx_int.EntityDefinition<HistoryPositionModel>(
      model: _entities[5],
      toOneRelations: (HistoryPositionModel object) => [],
      toManyRelations: (HistoryPositionModel object) => {},
      getId: (HistoryPositionModel object) => object.id,
      setId: (HistoryPositionModel object, int id) {
        object.id = id;
      },
      objectToFB: (HistoryPositionModel object, fb.Builder fbb) {
        final symbolOffset = fbb.writeString(object.symbol);
        final directionOffset = fbb.writeString(object.direction);
        final commentOffset = fbb.writeString(object.comment);
        final openTimeOffset = fbb.writeString(object.openTime);
        final closeTimeOffset = fbb.writeString(object.closeTime);
        fbb.startTable(17);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, symbolOffset);
        fbb.addOffset(2, directionOffset);
        fbb.addFloat64(3, object.volumeInit);
        fbb.addFloat64(4, object.volumeCurrent);
        fbb.addFloat64(5, object.openPrice);
        fbb.addFloat64(6, object.tp);
        fbb.addFloat64(7, object.sl);
        fbb.addFloat64(8, object.floating);
        fbb.addFloat64(9, object.margin);
        fbb.addFloat64(10, object.commission);
        fbb.addFloat64(11, object.swap);
        fbb.addOffset(12, commentOffset);
        fbb.addOffset(13, openTimeOffset);
        fbb.addFloat64(14, object.closePrice);
        fbb.addOffset(15, closeTimeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final symbolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final directionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final volumeInitParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final closeTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final volumeCurrentParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final openPriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final tpParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final slParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final closePriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        final floatingParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final marginParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final commissionParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final swapParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          26,
          0,
        );
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final openTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final object = HistoryPositionModel(
          id: idParam,
          symbol: symbolParam,
          direction: directionParam,
          volumeInit: volumeInitParam,
          closeTime: closeTimeParam,
          volumeCurrent: volumeCurrentParam,
          openPrice: openPriceParam,
          tp: tpParam,
          sl: slParam,
          closePrice: closePriceParam,
          floating: floatingParam,
          margin: marginParam,
          commission: commissionParam,
          swap: swapParam,
          comment: commentParam,
          openTime: openTimeParam,
        );

        return object;
      },
    ),
    OrderModel: obx_int.EntityDefinition<OrderModel>(
      model: _entities[6],
      toOneRelations: (OrderModel object) => [],
      toManyRelations: (OrderModel object) => {},
      getId: (OrderModel object) => object.id,
      setId: (OrderModel object, int id) {
        object.id = id;
      },
      objectToFB: (OrderModel object, fb.Builder fbb) {
        final symbolOffset = fbb.writeString(object.symbol);
        final directionOffset = fbb.writeString(object.direction);
        final expirationDateOffset = fbb.writeString(object.expirationDate);
        final createdAtOffset = fbb.writeString(object.createdAt);
        final commentOffset = fbb.writeString(object.comment);
        final openTimeOffset = fbb.writeString(object.openTime);
        fbb.startTable(12);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, symbolOffset);
        fbb.addOffset(2, directionOffset);
        fbb.addOffset(3, expirationDateOffset);
        fbb.addOffset(4, createdAtOffset);
        fbb.addFloat64(5, object.volume);
        fbb.addFloat64(6, object.openPrice);
        fbb.addFloat64(7, object.tp);
        fbb.addFloat64(8, object.sl);
        fbb.addOffset(9, commentOffset);
        fbb.addOffset(10, openTimeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final expirationDateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final symbolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final directionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final volumeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final tpParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final slParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final openPriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final createdAtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final openTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final object = OrderModel(
          id: idParam,
          expirationDate: expirationDateParam,
          symbol: symbolParam,
          direction: directionParam,
          volume: volumeParam,
          tp: tpParam,
          sl: slParam,
          openPrice: openPriceParam,
          createdAt: createdAtParam,
          comment: commentParam,
          openTime: openTimeParam,
        );

        return object;
      },
    ),
    PositionModel: obx_int.EntityDefinition<PositionModel>(
      model: _entities[7],
      toOneRelations: (PositionModel object) => [],
      toManyRelations: (PositionModel object) => {},
      getId: (PositionModel object) => object.id,
      setId: (PositionModel object, int id) {
        object.id = id;
      },
      objectToFB: (PositionModel object, fb.Builder fbb) {
        final groupSymbolOffset = fbb.writeString(object.groupSymbol);
        final directionOffset = fbb.writeString(object.direction);
        final commentOffset = fbb.writeString(object.comment);
        final openTimeOffset = fbb.writeString(object.openTime);
        fbb.startTable(15);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, groupSymbolOffset);
        fbb.addOffset(2, directionOffset);
        fbb.addFloat64(3, object.volumeInit);
        fbb.addFloat64(4, object.volumeCurrent);
        fbb.addFloat64(5, object.openPrice);
        fbb.addFloat64(6, object.tp);
        fbb.addFloat64(7, object.sl);
        fbb.addFloat64(8, object.floating);
        fbb.addFloat64(9, object.margin);
        fbb.addFloat64(10, object.commission);
        fbb.addFloat64(11, object.swap);
        fbb.addOffset(12, commentOffset);
        fbb.addOffset(13, openTimeOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final groupSymbolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final directionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final volumeInitParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final volumeCurrentParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final openPriceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final tpParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        final slParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final floatingParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          20,
          0,
        );
        final marginParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final commissionParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final swapParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          26,
          0,
        );
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final openTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final object = PositionModel(
          id: idParam,
          groupSymbol: groupSymbolParam,
          direction: directionParam,
          volumeInit: volumeInitParam,
          volumeCurrent: volumeCurrentParam,
          openPrice: openPriceParam,
          tp: tpParam,
          sl: slParam,
          floating: floatingParam,
          margin: marginParam,
          commission: commissionParam,
          swap: swapParam,
          comment: commentParam,
          openTime: openTimeParam,
        );

        return object;
      },
    ),
    SymbolModel: obx_int.EntityDefinition<SymbolModel>(
      model: _entities[8],
      toOneRelations: (SymbolModel object) => [],
      toManyRelations: (SymbolModel object) => {},
      getId: (SymbolModel object) => object.id,
      setId: (SymbolModel object, int id) {
        object.id = id;
      },
      objectToFB: (SymbolModel object, fb.Builder fbb) {
        final sectorOffset = fbb.writeString(object.sector);
        final nameOffset = fbb.writeString(object.name);
        final marginCurrencyOffset = fbb.writeString(object.marginCurrency);
        final descriptionOffset = fbb.writeString(object.description);
        final profitCurrencyOffset = fbb.writeString(object.profitCurrency);
        final askColorHexOffset = fbb.writeString(object.askColorHex);
        final bidColorHexOffset = fbb.writeString(object.bidColorHex);
        fbb.startTable(30);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, sectorOffset);
        fbb.addOffset(2, nameOffset);
        fbb.addInt64(3, object.leverage);
        fbb.addFloat64(4, object.ask);
        fbb.addFloat64(5, object.bid);
        fbb.addOffset(6, marginCurrencyOffset);
        fbb.addOffset(7, descriptionOffset);
        fbb.addOffset(8, profitCurrencyOffset);
        fbb.addInt64(9, object.timestamp);
        fbb.addFloat64(10, object.groupSymbol);
        fbb.addFloat64(11, object.contractSize);
        fbb.addFloat64(12, object.tickSize);
        fbb.addFloat64(13, object.profitRatio);
        fbb.addFloat64(14, object.marginRatio);
        fbb.addFloat64(15, object.swapLong);
        fbb.addFloat64(16, object.swapShort);
        fbb.addFloat64(17, object.commissionIn);
        fbb.addFloat64(18, object.commissionOut);
        fbb.addFloat64(19, object.volumeMin);
        fbb.addFloat64(20, object.volumeMax);
        fbb.addFloat64(21, object.volumeStep);
        fbb.addInt64(22, object.askDifference);
        fbb.addInt64(23, object.bidDifference);
        fbb.addInt64(24, object.stopLevel);
        fbb.addBool(25, object.isFav);
        fbb.addInt64(26, object.index);
        fbb.addOffset(27, askColorHexOffset);
        fbb.addOffset(28, bidColorHexOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final marginCurrencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final profitCurrencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final sectorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final leverageParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final askParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final bidParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        final askColorHexParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 58, '');
        final bidColorHexParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 60, '');
        final timestampParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final groupSymbolParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final contractSizeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          26,
          0,
        );
        final tickSizeParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          28,
          0,
        );
        final profitRatioParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          30,
          0,
        );
        final marginRatioParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          32,
          0,
        );
        final swapLongParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          34,
          0,
        );
        final swapShortParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        final commissionInParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          38,
          0,
        );
        final commissionOutParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          40,
          0,
        );
        final volumeMinParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          42,
          0,
        );
        final volumeMaxParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          44,
          0,
        );
        final volumeStepParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          46,
          0,
        );
        final askDifferenceParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          48,
          0,
        );
        final bidDifferenceParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          50,
          0,
        );
        final stopLevelParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          52,
          0,
        );
        final isFavParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          54,
          false,
        );
        final indexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          56,
          0,
        );
        final object = SymbolModel(
          id: idParam,
          marginCurrency: marginCurrencyParam,
          profitCurrency: profitCurrencyParam,
          description: descriptionParam,
          sector: sectorParam,
          name: nameParam,
          leverage: leverageParam,
          ask: askParam,
          bid: bidParam,
          askColorHex: askColorHexParam,
          bidColorHex: bidColorHexParam,
          timestamp: timestampParam,
          groupSymbol: groupSymbolParam,
          contractSize: contractSizeParam,
          tickSize: tickSizeParam,
          profitRatio: profitRatioParam,
          marginRatio: marginRatioParam,
          swapLong: swapLongParam,
          swapShort: swapShortParam,
          commissionIn: commissionInParam,
          commissionOut: commissionOutParam,
          volumeMin: volumeMinParam,
          volumeMax: volumeMaxParam,
          volumeStep: volumeStepParam,
          askDifference: askDifferenceParam,
          bidDifference: bidDifferenceParam,
          stopLevel: stopLevelParam,
          isFav: isFavParam,
          index: indexParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountFoundsModel] entity fields to define ObjectBox queries.
class AccountFoundsModel_ {
  /// See [AccountFoundsModel.id].
  static final id = obx.QueryIntegerProperty<AccountFoundsModel>(
    _entities[0].properties[0],
  );

  /// See [AccountFoundsModel.type].
  static final type = obx.QueryStringProperty<AccountFoundsModel>(
    _entities[0].properties[1],
  );

  /// See [AccountFoundsModel.amount].
  static final amount = obx.QueryDoubleProperty<AccountFoundsModel>(
    _entities[0].properties[2],
  );

  /// See [AccountFoundsModel.comment].
  static final comment = obx.QueryStringProperty<AccountFoundsModel>(
    _entities[0].properties[3],
  );

  /// See [AccountFoundsModel.source].
  static final source = obx.QueryStringProperty<AccountFoundsModel>(
    _entities[0].properties[4],
  );

  /// See [AccountFoundsModel.date].
  static final date = obx.QueryStringProperty<AccountFoundsModel>(
    _entities[0].properties[5],
  );

  /// See [AccountFoundsModel.commission].
  static final commission = obx.QueryDoubleProperty<AccountFoundsModel>(
    _entities[0].properties[6],
  );

  /// See [AccountFoundsModel.isA].
  static final isA = obx.QueryStringProperty<AccountFoundsModel>(
    _entities[0].properties[7],
  );

  /// See [AccountFoundsModel.swap].
  static final swap = obx.QueryDoubleProperty<AccountFoundsModel>(
    _entities[0].properties[8],
  );
}

/// [AppLogModel] entity fields to define ObjectBox queries.
class AppLogModel_ {
  /// See [AppLogModel.id].
  static final id = obx.QueryIntegerProperty<AppLogModel>(
    _entities[1].properties[0],
  );

  /// See [AppLogModel.accountNumber].
  static final accountNumber = obx.QueryIntegerProperty<AppLogModel>(
    _entities[1].properties[1],
  );

  /// See [AppLogModel.event].
  static final event = obx.QueryStringProperty<AppLogModel>(
    _entities[1].properties[2],
  );

  /// See [AppLogModel.createdAt].
  static final createdAt = obx.QueryDateProperty<AppLogModel>(
    _entities[1].properties[3],
  );
}

/// [ConnectedAccountInfoModel] entity fields to define ObjectBox queries.
class ConnectedAccountInfoModel_ {
  /// See [ConnectedAccountInfoModel.id].
  static final id = obx.QueryIntegerProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[0],
  );

  /// See [ConnectedAccountInfoModel.group].
  static final group = obx.QueryStringProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[1],
  );

  /// See [ConnectedAccountInfoModel.fullName].
  static final fullName = obx.QueryStringProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[2],
  );

  /// See [ConnectedAccountInfoModel.leverage].
  static final leverage = obx.QueryIntegerProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[3],
  );

  /// See [ConnectedAccountInfoModel.balance].
  static final balance = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[4],
  );

  /// See [ConnectedAccountInfoModel.credit].
  static final credit = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[5],
  );

  /// See [ConnectedAccountInfoModel.equity].
  static final equity = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[6],
  );

  /// See [ConnectedAccountInfoModel.floating].
  static final floating = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[7],
  );

  /// See [ConnectedAccountInfoModel.margin].
  static final margin = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[8],
  );

  /// See [ConnectedAccountInfoModel.marginFree].
  static final marginFree = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[9],
  );

  /// See [ConnectedAccountInfoModel.marginLevel].
  static final marginLevel = obx.QueryDoubleProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[10],
  );

  /// See [ConnectedAccountInfoModel.isSwapFree].
  static final isSwapFree = obx.QueryBooleanProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[11],
  );

  /// See [ConnectedAccountInfoModel.limitPositions].
  static final limitPositions =
      obx.QueryIntegerProperty<ConnectedAccountInfoModel>(
        _entities[2].properties[12],
      );

  /// See [ConnectedAccountInfoModel.limitPending].
  static final limitPending =
      obx.QueryIntegerProperty<ConnectedAccountInfoModel>(
        _entities[2].properties[13],
      );

  /// See [ConnectedAccountInfoModel.rights].
  static final rights = obx.QueryIntegerProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[14],
  );

  /// See [ConnectedAccountInfoModel.isDefault].
  static final isDefault = obx.QueryBooleanProperty<ConnectedAccountInfoModel>(
    _entities[2].properties[15],
  );
}

/// [HistoryActionModel] entity fields to define ObjectBox queries.
class HistoryActionModel_ {
  /// See [HistoryActionModel.id].
  static final id = obx.QueryIntegerProperty<HistoryActionModel>(
    _entities[3].properties[0],
  );

  /// See [HistoryActionModel.account].
  static final account = obx.QueryIntegerProperty<HistoryActionModel>(
    _entities[3].properties[1],
  );

  /// See [HistoryActionModel.symbol].
  static final symbol = obx.QueryStringProperty<HistoryActionModel>(
    _entities[3].properties[2],
  );

  /// See [HistoryActionModel.source].
  static final source = obx.QueryStringProperty<HistoryActionModel>(
    _entities[3].properties[3],
  );

  /// See [HistoryActionModel.direction].
  static final direction = obx.QueryStringProperty<HistoryActionModel>(
    _entities[3].properties[4],
  );

  /// See [HistoryActionModel.type].
  static final type = obx.QueryStringProperty<HistoryActionModel>(
    _entities[3].properties[5],
  );

  /// See [HistoryActionModel.volume].
  static final volume = obx.QueryDoubleProperty<HistoryActionModel>(
    _entities[3].properties[6],
  );

  /// See [HistoryActionModel.commission].
  static final commission = obx.QueryDoubleProperty<HistoryActionModel>(
    _entities[3].properties[7],
  );

  /// See [HistoryActionModel.price].
  static final price = obx.QueryDoubleProperty<HistoryActionModel>(
    _entities[3].properties[8],
  );

  /// See [HistoryActionModel.profit].
  static final profit = obx.QueryDoubleProperty<HistoryActionModel>(
    _entities[3].properties[9],
  );

  /// See [HistoryActionModel.createdAt].
  static final createdAt = obx.QueryStringProperty<HistoryActionModel>(
    _entities[3].properties[10],
  );
}

/// [HistoryPendingModel] entity fields to define ObjectBox queries.
class HistoryPendingModel_ {
  /// See [HistoryPendingModel.id].
  static final id = obx.QueryIntegerProperty<HistoryPendingModel>(
    _entities[4].properties[0],
  );

  /// See [HistoryPendingModel.symbol].
  static final symbol = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[1],
  );

  /// See [HistoryPendingModel.direction].
  static final direction = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[2],
  );

  /// See [HistoryPendingModel.expirationDate].
  static final expirationDate = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[3],
  );

  /// See [HistoryPendingModel.createdAt].
  static final createdAt = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[4],
  );

  /// See [HistoryPendingModel.volume].
  static final volume = obx.QueryDoubleProperty<HistoryPendingModel>(
    _entities[4].properties[5],
  );

  /// See [HistoryPendingModel.openPrice].
  static final openPrice = obx.QueryDoubleProperty<HistoryPendingModel>(
    _entities[4].properties[6],
  );

  /// See [HistoryPendingModel.tp].
  static final tp = obx.QueryDoubleProperty<HistoryPendingModel>(
    _entities[4].properties[7],
  );

  /// See [HistoryPendingModel.sl].
  static final sl = obx.QueryDoubleProperty<HistoryPendingModel>(
    _entities[4].properties[8],
  );

  /// See [HistoryPendingModel.type].
  static final type = obx.QueryIntegerProperty<HistoryPendingModel>(
    _entities[4].properties[9],
  );

  /// See [HistoryPendingModel.comment].
  static final comment = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[10],
  );

  /// See [HistoryPendingModel.openTime].
  static final openTime = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[11],
  );

  /// See [HistoryPendingModel.closedAt].
  static final closedAt = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[12],
  );

  /// See [HistoryPendingModel.reason].
  static final reason = obx.QueryStringProperty<HistoryPendingModel>(
    _entities[4].properties[13],
  );
}

/// [HistoryPositionModel] entity fields to define ObjectBox queries.
class HistoryPositionModel_ {
  /// See [HistoryPositionModel.id].
  static final id = obx.QueryIntegerProperty<HistoryPositionModel>(
    _entities[5].properties[0],
  );

  /// See [HistoryPositionModel.symbol].
  static final symbol = obx.QueryStringProperty<HistoryPositionModel>(
    _entities[5].properties[1],
  );

  /// See [HistoryPositionModel.direction].
  static final direction = obx.QueryStringProperty<HistoryPositionModel>(
    _entities[5].properties[2],
  );

  /// See [HistoryPositionModel.volumeInit].
  static final volumeInit = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[3],
  );

  /// See [HistoryPositionModel.volumeCurrent].
  static final volumeCurrent = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[4],
  );

  /// See [HistoryPositionModel.openPrice].
  static final openPrice = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[5],
  );

  /// See [HistoryPositionModel.tp].
  static final tp = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[6],
  );

  /// See [HistoryPositionModel.sl].
  static final sl = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[7],
  );

  /// See [HistoryPositionModel.floating].
  static final floating = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[8],
  );

  /// See [HistoryPositionModel.margin].
  static final margin = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[9],
  );

  /// See [HistoryPositionModel.commission].
  static final commission = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[10],
  );

  /// See [HistoryPositionModel.swap].
  static final swap = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[11],
  );

  /// See [HistoryPositionModel.comment].
  static final comment = obx.QueryStringProperty<HistoryPositionModel>(
    _entities[5].properties[12],
  );

  /// See [HistoryPositionModel.openTime].
  static final openTime = obx.QueryStringProperty<HistoryPositionModel>(
    _entities[5].properties[13],
  );

  /// See [HistoryPositionModel.closePrice].
  static final closePrice = obx.QueryDoubleProperty<HistoryPositionModel>(
    _entities[5].properties[14],
  );

  /// See [HistoryPositionModel.closeTime].
  static final closeTime = obx.QueryStringProperty<HistoryPositionModel>(
    _entities[5].properties[15],
  );
}

/// [OrderModel] entity fields to define ObjectBox queries.
class OrderModel_ {
  /// See [OrderModel.id].
  static final id = obx.QueryIntegerProperty<OrderModel>(
    _entities[6].properties[0],
  );

  /// See [OrderModel.symbol].
  static final symbol = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[1],
  );

  /// See [OrderModel.direction].
  static final direction = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[2],
  );

  /// See [OrderModel.expirationDate].
  static final expirationDate = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[3],
  );

  /// See [OrderModel.createdAt].
  static final createdAt = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[4],
  );

  /// See [OrderModel.volume].
  static final volume = obx.QueryDoubleProperty<OrderModel>(
    _entities[6].properties[5],
  );

  /// See [OrderModel.openPrice].
  static final openPrice = obx.QueryDoubleProperty<OrderModel>(
    _entities[6].properties[6],
  );

  /// See [OrderModel.tp].
  static final tp = obx.QueryDoubleProperty<OrderModel>(
    _entities[6].properties[7],
  );

  /// See [OrderModel.sl].
  static final sl = obx.QueryDoubleProperty<OrderModel>(
    _entities[6].properties[8],
  );

  /// See [OrderModel.comment].
  static final comment = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[9],
  );

  /// See [OrderModel.openTime].
  static final openTime = obx.QueryStringProperty<OrderModel>(
    _entities[6].properties[10],
  );
}

/// [PositionModel] entity fields to define ObjectBox queries.
class PositionModel_ {
  /// See [PositionModel.id].
  static final id = obx.QueryIntegerProperty<PositionModel>(
    _entities[7].properties[0],
  );

  /// See [PositionModel.groupSymbol].
  static final groupSymbol = obx.QueryStringProperty<PositionModel>(
    _entities[7].properties[1],
  );

  /// See [PositionModel.direction].
  static final direction = obx.QueryStringProperty<PositionModel>(
    _entities[7].properties[2],
  );

  /// See [PositionModel.volumeInit].
  static final volumeInit = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[3],
  );

  /// See [PositionModel.volumeCurrent].
  static final volumeCurrent = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[4],
  );

  /// See [PositionModel.openPrice].
  static final openPrice = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[5],
  );

  /// See [PositionModel.tp].
  static final tp = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[6],
  );

  /// See [PositionModel.sl].
  static final sl = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[7],
  );

  /// See [PositionModel.floating].
  static final floating = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[8],
  );

  /// See [PositionModel.margin].
  static final margin = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[9],
  );

  /// See [PositionModel.commission].
  static final commission = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[10],
  );

  /// See [PositionModel.swap].
  static final swap = obx.QueryDoubleProperty<PositionModel>(
    _entities[7].properties[11],
  );

  /// See [PositionModel.comment].
  static final comment = obx.QueryStringProperty<PositionModel>(
    _entities[7].properties[12],
  );

  /// See [PositionModel.openTime].
  static final openTime = obx.QueryStringProperty<PositionModel>(
    _entities[7].properties[13],
  );
}

/// [SymbolModel] entity fields to define ObjectBox queries.
class SymbolModel_ {
  /// See [SymbolModel.id].
  static final id = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[0],
  );

  /// See [SymbolModel.sector].
  static final sector = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[1],
  );

  /// See [SymbolModel.name].
  static final name = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[2],
  );

  /// See [SymbolModel.leverage].
  static final leverage = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[3],
  );

  /// See [SymbolModel.ask].
  static final ask = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[4],
  );

  /// See [SymbolModel.bid].
  static final bid = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[5],
  );

  /// See [SymbolModel.marginCurrency].
  static final marginCurrency = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[6],
  );

  /// See [SymbolModel.description].
  static final description = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[7],
  );

  /// See [SymbolModel.profitCurrency].
  static final profitCurrency = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[8],
  );

  /// See [SymbolModel.timestamp].
  static final timestamp = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[9],
  );

  /// See [SymbolModel.groupSymbol].
  static final groupSymbol = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[10],
  );

  /// See [SymbolModel.contractSize].
  static final contractSize = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[11],
  );

  /// See [SymbolModel.tickSize].
  static final tickSize = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[12],
  );

  /// See [SymbolModel.profitRatio].
  static final profitRatio = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[13],
  );

  /// See [SymbolModel.marginRatio].
  static final marginRatio = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[14],
  );

  /// See [SymbolModel.swapLong].
  static final swapLong = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[15],
  );

  /// See [SymbolModel.swapShort].
  static final swapShort = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[16],
  );

  /// See [SymbolModel.commissionIn].
  static final commissionIn = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[17],
  );

  /// See [SymbolModel.commissionOut].
  static final commissionOut = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[18],
  );

  /// See [SymbolModel.volumeMin].
  static final volumeMin = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[19],
  );

  /// See [SymbolModel.volumeMax].
  static final volumeMax = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[20],
  );

  /// See [SymbolModel.volumeStep].
  static final volumeStep = obx.QueryDoubleProperty<SymbolModel>(
    _entities[8].properties[21],
  );

  /// See [SymbolModel.askDifference].
  static final askDifference = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[22],
  );

  /// See [SymbolModel.bidDifference].
  static final bidDifference = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[23],
  );

  /// See [SymbolModel.stopLevel].
  static final stopLevel = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[24],
  );

  /// See [SymbolModel.isFav].
  static final isFav = obx.QueryBooleanProperty<SymbolModel>(
    _entities[8].properties[25],
  );

  /// See [SymbolModel.index].
  static final index = obx.QueryIntegerProperty<SymbolModel>(
    _entities[8].properties[26],
  );

  /// See [SymbolModel.askColorHex].
  static final askColorHex = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[27],
  );

  /// See [SymbolModel.bidColorHex].
  static final bidColorHex = obx.QueryStringProperty<SymbolModel>(
    _entities[8].properties[28],
  );
}
